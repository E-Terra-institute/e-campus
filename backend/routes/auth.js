const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const sendMail = require('../utils/mailer');
const User = require('../models/User');

// –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥—ã
const allowedInviteCodes = ['ETERRA2024', 'MOON2025', 'E-CAMPUS'];

// üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
router.post('/register', async (req, res) => {
  try {
    const { email, password, inviteCode } = req.body;

    if (!allowedInviteCodes.includes(inviteCode)) {
      return res.status(403).json({ message: '–ù–µ–¥—ñ–π—Å–Ω–∏–π —ñ–Ω–≤–∞–π—Ç-–∫–æ–¥' });
    }

    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({ email, password: hashedPassword, inviteCode });
    await newUser.save();

    res.status(201).json({ message: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üîê –õ–æ–≥—ñ–Ω
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å' });
    }

    const token = jwt.sign(
      { userId: user._id, email: user.email },
      '—Å–µ–∫—Ä–µ—Ç–Ω–∏–π_–∫–ª—é—á', // –≤—ã–Ω–µ—Å–µ–º –ø–æ–∑–∂–µ –≤ .env
      { expiresIn: '7d' }
    );

    res.json({ token, message: '–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üîÅ –ó–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
router.post('/forgot-password', async (req, res) => {
  const { email } = req.body;
  const user = await User.findOne({ email });

  if (!user) {
    return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
  }

  const token = crypto.randomBytes(32).toString('hex');
  user.resetToken = token;
  user.resetTokenExpires = Date.now() + 3600000; // 1 –≥–æ–¥–∏–Ω–∞
  await user.save();

  const resetLink = `http://localhost:3000/reset-password/${token}`;

  // üß™ –ó–∞–º—ñ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ ‚Äî –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
  console.log(`üëâ –õ—ñ–Ω–∫ –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è: ${resetLink}`);

  res.json({ message: '–õ–∏—Å—Ç (—É–º–æ–≤–Ω–æ) –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä –∫–æ–Ω—Å–æ–ª—å.' });
});

// üîÅ –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω
router.post('/reset-password/:token', async (req, res) => {
  const { token } = req.params;
  const { password } = req.body;

  const user = await User.findOne({
    resetToken: token,
    resetTokenExpires: { $gt: Date.now() },
  });

  if (!user) {
    return res.status(400).json({ message: '–ù–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω' });
  }

  user.password = await bcrypt.hash(password, 10);
  user.resetToken = undefined;
  user.resetTokenExpires = undefined;
  await user.save();

  res.json({ message: '–ü–∞—Ä–æ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ' });
});


module.exports = router;
